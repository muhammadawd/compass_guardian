{"remainingRequest":"/home/muhammadawd/WebstormProjects/Guardian/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/home/muhammadawd/WebstormProjects/Guardian/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/muhammadawd/WebstormProjects/Guardian/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/muhammadawd/WebstormProjects/Guardian/src/views/Students/Exam/Index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/muhammadawd/WebstormProjects/Guardian/src/views/Students/Exam/Index.vue","mtime":1580909936872},{"path":"/home/muhammadawd/WebstormProjects/Guardian/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/muhammadawd/WebstormProjects/Guardian/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/muhammadawd/WebstormProjects/Guardian/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/muhammadawd/WebstormProjects/Guardian/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.promise\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Multiselect from 'vue-multiselect';\nimport 'vue-multiselect/dist/vue-multiselect.min.css';\nexport default {\n  components: {\n    Multiselect: Multiselect\n  },\n  data: function data() {\n    return {\n      dataModel: {},\n      loading: false,\n      disable: {\n        next: false,\n        previous: false\n      },\n      current_question_index: 0,\n      timeCounter: {}\n    };\n  },\n  computed: {},\n  mounted: function mounted() {\n    var vm = this;\n    vm.dataModel = JSON.parse(window.ls.getFromStorage('current_exam'));\n    vm.sideRemove();\n\n    if (!vm.dataModel) {\n      vm.$router.push({\n        name: 'all_student_exam'\n      });\n    }\n\n    var current_state = 0;\n\n    _.each(vm.dataModel.questions, function (question, key) {\n      if (question.question.has_answered) current_state = key;\n    });\n\n    vm.current_question_index = current_state;\n    var interval = setInterval(function () {\n      vm.timeCounter = vm.examTimer(vm.dataModel.created_at, vm.dataModel.exam.duration);\n\n      if (vm.timeCounter._seconds <= 0) {\n        window.helper.showMessage('error', vm);\n        clearInterval(interval);\n        vm.$router.push({\n          name: 'all_student_exam'\n        });\n        setTimeout(function () {\n          location.reload();\n        }, 1000);\n      }\n    }, 1000);\n  },\n  methods: {\n    sideRemove: function sideRemove() {\n      $('#btnSidebarToggler').click();\n      $('#content-area').attr('style', 'margin-right: 0 !important');\n      $('.vs-sidebar').remove();\n      $('.content-area-reduced .vx-navbar-wrapper').css({\n        width: '100%'\n      });\n    },\n    updateStorageModel: function updateStorageModel(question, answer) {\n      console.log(question, answer);\n      question.has_answered = 1;\n\n      if (question.type == 'true_false') {\n        _.each(question.answers, function (k, i) {\n          k.is_correct = 0;\n        });\n\n        answer.is_correct = 1;\n      }\n\n      console.log('updated');\n      window.ls.saveToStorage('current_exam', this.dataModel);\n    },\n    getCurrentSymbol: function getCurrentSymbol(questions, question, question_index, current_index) {\n      // ⓘ ✘ ✔\n      if (question.question.has_answered) {\n        return '✔';\n      }\n\n      if (question_index <= current_index) {\n        return 'ⓘ';\n      }\n\n      return '✘';\n    },\n    getCurrentClass: function getCurrentClass(questions, question, question_index, current_index) {\n      // ⓘ ✘ ✔\n      if (question.question.has_answered) {\n        return 'success';\n      }\n\n      if (question_index <= current_index) {\n        return 'primary';\n      }\n\n      return 'danger';\n    },\n    getCurrentStyle: function getCurrentStyle(questions, question, question_index, current_index) {\n      // ⓘ ✘ ✔\n      if (question_index <= current_index) {\n        return {\n          textDecoration: 'none'\n        };\n      }\n\n      return {\n        textDecoration: 'line-through'\n      };\n    },\n    goPrevious: function goPrevious() {\n      var vm = this;\n      vm.openLoadingContained(\"#button-with-loading\");\n      if (vm.current_question_index != 0) vm.current_question_index--;\n      vm.closeLoadingContained(\"#button-with-loading > .con-vs-loading\");\n    },\n    goNext: function goNext() {\n      var vm = this;\n      vm.openLoadingContained(\"#button-with-loading2\");\n      var current_question = vm.dataModel.questions[vm.current_question_index]; // if (!current_question.question.has_answered) {\n      //   window.helper.showMessage('danger', vm, vm.$ml.get('should_ans'));\n      // } else {\n\n      var question_length = vm.dataModel.questions.length - 1;\n      if (question_length > vm.current_question_index) vm.current_question_index++; // }\n\n      vm.closeLoadingContained(\"#button-with-loading2 > .con-vs-loading\");\n    },\n    prepareData: function prepareData(request_data) {\n      // request_data.questions[0].question.answers\n      var exams = [];\n\n      _.each(request_data.questions, function (questionItem, key) {\n        _.each(questionItem.question.answers, function (answerItem, key) {\n          if (questionItem.question.type == 'text') answerItem.is_correct = 1;\n\n          if (answerItem.answer_value) {\n            exams.push({\n              id: questionItem.id,\n              answer: questionItem.question.type == 'text' ? answerItem.answer_value : answerItem.id,\n              is_correct: answerItem.is_correct ? 1 : 0\n            });\n          }\n        });\n      });\n\n      exams = _.filter(exams, function (o) {\n        if (o.is_correct) return o;\n      });\n      return {\n        id: request_data.id,\n        questions: exams\n      };\n    },\n    finishExam: function finishExam() {\n      var vm = this; // vm.openLoadingContained(\"#button-with-loading3\")\n\n      var request_data = vm.dataModel;\n      var data_to_send = vm.prepareData(request_data);\n      console.log(vm.dataModel.questions.length, data_to_send.questions.length);\n\n      if (vm.dataModel.questions.length != data_to_send.questions.length) {\n        window.helper.showMessage('danger', vm, 'عليك الاجابة على السؤال اولا');\n      } // return;\n\n\n      $('.span-text-validation').text('');\n\n      try {\n        window.serviceAPI.API().post(window.serviceAPI.UPDATE_STUDENT_EXAM, data_to_send).then(function (response) {\n          response = response.data;\n\n          if (response.status) {\n            window.helper.showMessage('success', vm);\n            window.ls.clearAllStorage('current_exam');\n            vm.$router.push({\n              name: 'student_exam_result',\n              params: {\n                id: request_data.id\n              }\n            });\n            return null;\n          }\n\n          location.reload();\n          vm.closeLoadingContained(\"#button-with-loading3 > .con-vs-loading\");\n        }).catch(function (error) {\n          vm.closeLoadingContained(\"#button-with-loading3 > .con-vs-loading\");\n          window.helper.handleError(error, vm);\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    },\n    examTimer: function examTimer(start, duration) {\n      start = this.$moment(start, 'YYYY-MM-DD HH:mm');\n      var end_at = start.add(duration, 'minutes');\n      return this.diffTwoDates(end_at.format('YYYY-MM-DD HH:mm'), new Date());\n    },\n    diffTwoDates: function diffTwoDates(start, end) {\n      start = this.$moment(start, 'YYYY.MM.DD HH:mm');\n      end = this.$moment(end, 'YYYY.MM.DD HH:mm');\n      var seconds = start.diff(end, 'seconds');\n\n      if (seconds < 0) {\n        return {\n          minutes: 0,\n          seconds: 0,\n          _seconds: 0\n        };\n      }\n\n      return this.fancyTimeFormat(seconds);\n    },\n    fancyTimeFormat: function fancyTimeFormat(time) {\n      // // Hours, minutes and seconds\n      // var hrs = ~~(time / 3600);\n      var mins = ~~(time % 3600 / 60);\n      var secs = ~~time % 60; //\n      // var ret = \"\";\n      //\n      // // if (hrs > 0) {\n      // //   ret += \"\" + hrs + \":\" + (mins < 10 ? \"0\" : \"\");\n      // // }\n      //\n      // ret += \"\" + mins + \":\" + (secs < 10 ? \"0\" : \"\");\n      // ret += \"\" + secs;\n\n      return {\n        minutes: mins,\n        seconds: secs,\n        _seconds: time\n      };\n    },\n    openLoadingContained: function openLoadingContained(selector) {\n      this.loading = true;\n      this.$vs.loading({\n        background: '#000',\n        color: '#fff',\n        container: selector,\n        scale: 0.45\n      });\n    },\n    closeLoadingContained: function closeLoadingContained(selector) {\n      var _this = this;\n\n      setTimeout(function () {\n        _this.loading = false;\n\n        _this.$vs.loading.close(selector);\n      }, 1000);\n    }\n  }\n};",{"version":3,"sources":["Index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div id=\"knowledge-base-page\">\r\n    <div class=\"vx-row\">\r\n      <div class=\"vx-col w-full md:w-1/1 mb-base\">\r\n        <vx-card class=\"text-right\">\r\n          <div class=\"vx-row\"\r\n               style=\"background: linear-gradient(to left, rgb(15, 32, 39), rgb(32, 58, 67), rgb(44, 83, 100));padding: 10px 4px;border-radius: 10px 10px 0\">\r\n            <div class=\"vx-col w-full mb-base \">\r\n              <vs-alert class=\"mb-4 m-0\" style=\"background: #274b59;color: #fff\">\r\n                <!--                <span class=\"text-bold\">{{$ml.get('student_exam')}}</span>-->\r\n                <span v-if=\"dataModel.exam\"\r\n                      class=\"text-bold\">{{dataModel.exam.name}} / {{dataModel.exam.teacher.name}}</span>\r\n              </vs-alert>\r\n            </div>\r\n            <div class=\"vx-col md:w-1/4 mb-base \">\r\n              <h3 v-if=\"dataModel.exam\" class=\"text-white text-bold\">{{$ml.get('exam_period')}} : <span\r\n                class=\"text-primary text-bold\">{{dataModel.exam.duration}}</span>\r\n                {{$ml.get('mins')}}</h3>\r\n              <!--              <div>{{$ml.get('remain_time')}} : {{timeCounter}}</div>-->\r\n              <div class=\"vx-card bg-primary-gradient p-0 m-0\"><!---->\r\n                <div class=\"vx-card__collapsible-content vs-con-loading__container\">\r\n                  <div class=\"vx-card__body m-0 \">\r\n                    <div class=\"vx-row text-center \">\r\n                      <div class=\"vx-col w-full sm:w-1/3 \">\r\n                        <h3 class=\"text-bold text-white\">{{$ml.get('seconds')}}</h3>\r\n                        <h1 class=\"text-bold mt-3 text-white\">{{timeCounter.seconds}}</h1>\r\n                      </div>\r\n                      <div class=\"vx-col w-full sm:w-1/3 \">\r\n                        <br>\r\n                        <h1 class=\"text-bold text-white\">:</h1>\r\n                      </div>\r\n                      <div class=\"vx-col w-full sm:w-1/3 \">\r\n                        <h3 class=\"text-bold text-white\">{{$ml.get('minutes')}}</h3>\r\n                        <h1 class=\"text-bold mt-3 text-white\">{{timeCounter.minutes}}</h1>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"vx-col md:w-3/4 text-left mb-base\">\r\n              <div class=\"btn-group\" v-if=\"dataModel.questions\" dir=\"ltr\">\r\n\r\n                <vs-button :disabled=\"current_question_index == 0\" @click=\"goPrevious()\" ref=\"loadableButton\"\r\n                           id=\"button-with-loading\"\r\n                           class=\"vs-con-loading__container vs-button-dark text-bold\" type=\"filled\" vslor=\"primary\">\r\n                  <i class=\"fas fa-arrow-left\"></i>\r\n                  {{$ml.get('previous')}}\r\n                </vs-button>\r\n\r\n                <vs-button ref=\"loadableButton2\" id=\"button-with-loading2\"\r\n                           :disabled=\"dataModel.questions.length -1 == current_question_index\" @click=\"goNext()\"\r\n                           class=\"vs-con-loading__container vs-button-dark text-bold\" type=\"filled\" vslor=\"primary\">\r\n                  {{$ml.get('next')}}\r\n                  <i class=\"fas fa-arrow-right\"></i>\r\n                </vs-button>\r\n\r\n\r\n                <vs-button ref=\"loadableButton3\" id=\"button-with-loading3\"\r\n                           :disabled=\"dataModel.questions.length -1 != current_question_index\" @click=\"finishExam()\"\r\n                           class=\"vs-con-loading__container vs-button-primary text-bold\" type=\"filled\" vslor=\"primary\">\r\n                  {{$ml.get('finish_exam')}}\r\n                  <i class=\"fas fa-file\"></i>\r\n                </vs-button>\r\n\r\n              </div>\r\n            </div>\r\n            <div class=\"vx-col w-full mb-base\">\r\n              <hr class=\"pb-0\">\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"vx-row\">\r\n            <div class=\"vx-col md:w-1/5 mb-base\" style=\"background: rgb(19, 38, 45);color: #fff;padding-left: 0 \">\r\n              <!--           ⓘ  ✘ ✔-->\r\n              <div style=\"max-height: 420px;overflow-y: scroll;\">\r\n                <vs-list>\r\n                  <vs-list-header :title=\"$ml.get('questions')\" class=\"text-bold\" color=\"info\"></vs-list-header>\r\n                  <div v-for=\"(question , key) in dataModel.questions\" :key=\"key\"\r\n                       :style=\"getCurrentStyle(dataModel.questions,question,key,current_question_index)\">\r\n                    <vs-list-header :title=\"$ml.get('question') + ` ${key+1}`\" color=\"info\"></vs-list-header>\r\n                    <vs-list-item :title=\"`${question.question ? question.question.name : ''}`\"\r\n                                  :subtitle=\"`${question.question ? $ml.get(question.question.type) : ''}`\">\r\n                      <template slot=\"avatar\">\r\n                        <vs-avatar :color=\"getCurrentClass(dataModel.questions,question,key,current_question_index)\"\r\n                                   :text=\"getCurrentSymbol(dataModel.questions,question,key,current_question_index)\"/>\r\n                      </template>\r\n                    </vs-list-item>\r\n                  </div>\r\n                </vs-list>\r\n              </div>\r\n\r\n            </div>\r\n\r\n            <div class=\"vx-col md:w-4/5 mb-base p-0\">\r\n\r\n              <vx-card class=\"text-right mt-3 ml-3 mr-2\" v-if=\"dataModel.questions\"\r\n                       style=\"background: linear-gradient(to right, rgb(15, 32, 39), rgb(32, 58, 67), rgb(44, 83, 100))\">\r\n                <div class=\"vx-row\">\r\n                  <div class=\"vx-col w-full text-white\">\r\n                    <h1 class=\"text-bold mb-3 text-white\">{{$ml.get('question') + ` ${current_question_index+1}`}}</h1>\r\n                    <h2 class=\"text-white\">{{dataModel.questions[current_question_index].question.name}}</h2>\r\n                  </div>\r\n                </div>\r\n              </vx-card>\r\n\r\n              <vx-card class=\"text-right mt-3 mb-4\" v-if=\"dataModel.questions\" style=\"background: #efefef\">\r\n                <div class=\"vx-row\">\r\n                  <div class=\"vx-col w-full mb-base\">\r\n                    <h1 class=\"text-bold mb-3\">{{$ml.get('answer')}}</h1>\r\n                    <!--                                        <h2>{{dataModel.questions[current_question_index].question.answers}}</h2>-->\r\n\r\n                    <div class=\"vx-row\" v-if=\"dataModel.questions[current_question_index].question.type == 'mcq'\">\r\n                      <div class=\"vx-col w-full mb-base\">\r\n                        <div class=\"vx-row\">\r\n                          <div class=\"vx-col md:w-1/4 mb-base\"\r\n                               v-for=\"(answer,key) in dataModel.questions[current_question_index].question.answers\"\r\n                               :key=\"key\">\r\n                            <label class=\"vs-input--label\">\r\n                              <input type=\"checkbox\"\r\n                                     @change=\"updateStorageModel(dataModel.questions[current_question_index].question,dataModel.questions[current_question_index].question.answers[key])\"\r\n                                     v-model=\"dataModel.questions[current_question_index].question.answers[key].is_correct\"\r\n                                     value=\"1\">\r\n                              {{$ml.get('answer')}}\r\n                            </label>\r\n                            <vs-input class=\"w-full\" :disabled=\"true\"\r\n                                      v-model=\"dataModel.questions[current_question_index].question.answers[key].answer_value\"></vs-input>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div class=\"vx-row\"\r\n                         v-if=\"dataModel.questions[current_question_index].question.type == 'true_false'\">\r\n                      <div class=\"vx-col md:w-1/2 text-center mb-base\"\r\n                           v-for=\"(answer,key) in dataModel.questions[current_question_index].question.answers\"\r\n                           :key=\"key\">\r\n                        <input type=\"radio\" :id=\"`radio-${key}`\" name=\"radio\"\r\n                               @change=\"updateStorageModel(dataModel.questions[current_question_index].question,dataModel.questions[current_question_index].question.answers[key])\"\r\n                               v-model=\"dataModel.questions[current_question_index].question.answers[key].is_correct\"\r\n                               value=\"1\">\r\n                        <label :for=\"`radio-${key}`\">\r\n                          <!--                          {{answer.value}}-->\r\n\r\n                          <img\r\n                            width=\"80\"\r\n                            v-if=\"answer.value == 'true'\"\r\n                            src=\"@/assets/images/elements/check.jpg\"\r\n                            alt=\"\">\r\n                          <img\r\n                            width=\"80\"\r\n                            v-if=\"answer.value == 'false'\"\r\n                            src=\"@/assets/images/elements/cross.jpg\"\r\n                            alt=\"\">\r\n                          <!--                          <i class=\"fa fa-credit-card-alt\" aria-hidden=\"true\"></i>-->\r\n                        </label>\r\n                        <!--                        <vs-select class=\"w-full\" :label=\"$ml.get('answer')\">-->\r\n                        <!--                          <vs-select-item value=\"true\" :text=\"$ml.get('true')\"></vs-select-item>-->\r\n                        <!--                          <vs-select-item value=\"false\" :text=\"$ml.get('false')\"></vs-select-item>-->\r\n                        <!--                        </vs-select>-->\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div class=\"vx-row\" v-if=\"dataModel.questions[current_question_index].question.type == 'text'\">\r\n                      <div class=\"vx-col w-full mb-base\"\r\n                           v-if=\"dataModel.questions[current_question_index].question.answers[0]\">\r\n                        <input type=\"hidden\"\r\n                               v-model=\"dataModel.questions[current_question_index].question.answers[0].is_correct\"\r\n                               value=\"1\">\r\n                        <vs-textarea\r\n                          v-model=\"dataModel.questions[current_question_index].question.answers[0].answer_value\"\r\n                          @keyup=\"updateStorageModel(dataModel.questions[current_question_index].question,dataModel.questions[current_question_index].question.answers[0])\"\r\n                          :label=\"$ml.get('answer')\" style=\"background: #FFF\"\r\n                          rows=\"5\"></vs-textarea>\r\n                      </div>\r\n                    </div>\r\n\r\n                  </div>\r\n                </div>\r\n              </vx-card>\r\n\r\n              <div style=\"background-color: rgb(19, 38, 45);overflow: hidden;padding: 10px;margin: 0\"\r\n                   v-if=\"dataModel.questions\">\r\n                <vs-button :disabled=\"current_question_index == 0\" @click=\"goPrevious()\" ref=\"loadableButton\"\r\n                           id=\"button-with-loading4\"\r\n                           class=\"vs-con-loading__container float-left vs-button-border text-bold\" type=\"filled\"\r\n                           vslor=\"primary\">\r\n                  <i class=\"fas fa-arrow-left\"></i>\r\n                  {{$ml.get('previous')}}\r\n                </vs-button>\r\n\r\n                <vs-button ref=\"loadableButton2\" id=\"button-with-loading5\"\r\n                           :disabled=\"dataModel.questions.length -1 == current_question_index\" @click=\"goNext()\"\r\n                           class=\"vs-con-loading__container float-right vs-button-border text-bold\" type=\"filled\"\r\n                           vslor=\"primary\">\r\n                  {{$ml.get('next')}}\r\n                  <i class=\"fas fa-arrow-right\"></i>\r\n                </vs-button>\r\n              </div>\r\n\r\n\r\n            </div>\r\n          </div>\r\n\r\n        </vx-card>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import Multiselect from 'vue-multiselect'\r\n  import 'vue-multiselect/dist/vue-multiselect.min.css'\r\n\r\n  export default {\r\n    components: {\r\n      Multiselect\r\n    },\r\n    data() {\r\n      return {\r\n        dataModel: {},\r\n        loading: false,\r\n        disable: {\r\n          next: false,\r\n          previous: false,\r\n        },\r\n        current_question_index: 0,\r\n        timeCounter: {},\r\n      }\r\n    },\r\n    computed: {},\r\n    mounted() {\r\n      let vm = this;\r\n      vm.dataModel = JSON.parse(window.ls.getFromStorage('current_exam'));\r\n\r\n      vm.sideRemove();\r\n\r\n      if (!vm.dataModel) {\r\n        vm.$router.push({name: 'all_student_exam'})\r\n      }\r\n\r\n      let current_state = 0;\r\n      _.each(vm.dataModel.questions, (question, key) => {\r\n        if (question.question.has_answered) current_state = key\r\n      })\r\n      vm.current_question_index = current_state;\r\n\r\n      let interval = setInterval(() => {\r\n        vm.timeCounter = vm.examTimer(vm.dataModel.created_at, vm.dataModel.exam.duration)\r\n        if (vm.timeCounter._seconds <= 0) {\r\n          window.helper.showMessage('error', vm);\r\n          clearInterval(interval)\r\n          vm.$router.push({name: 'all_student_exam'})\r\n          setTimeout(() => {\r\n            location.reload()\r\n          }, 1000)\r\n        }\r\n      }, 1000)\r\n    },\r\n    methods: {\r\n      sideRemove() {\r\n        $('#btnSidebarToggler').click();\r\n        $('#content-area').attr('style', 'margin-right: 0 !important');\r\n        $('.vs-sidebar').remove();\r\n        $('.content-area-reduced .vx-navbar-wrapper').css({\r\n          width: '100%'\r\n        });\r\n\r\n      },\r\n      updateStorageModel(question, answer) {\r\n\r\n        console.log(question, answer)\r\n        question.has_answered = 1;\r\n        if (question.type == 'true_false') {\r\n          _.each(question.answers, (k, i) => {\r\n            k.is_correct = 0;\r\n          })\r\n          answer.is_correct = 1;\r\n        }\r\n        console.log('updated')\r\n        window.ls.saveToStorage('current_exam', this.dataModel)\r\n      },\r\n      getCurrentSymbol(questions, question, question_index, current_index) {\r\n        // ⓘ ✘ ✔\r\n        if (question.question.has_answered) {\r\n          return '✔';\r\n        }\r\n        if (question_index <= current_index) {\r\n          return 'ⓘ';\r\n        }\r\n        return '✘'\r\n      },\r\n      getCurrentClass(questions, question, question_index, current_index) {\r\n        // ⓘ ✘ ✔\r\n        if (question.question.has_answered) {\r\n          return 'success';\r\n        }\r\n        if (question_index <= current_index) {\r\n          return 'primary';\r\n        }\r\n        return 'danger'\r\n      },\r\n      getCurrentStyle(questions, question, question_index, current_index) {\r\n        // ⓘ ✘ ✔\r\n        if (question_index <= current_index) {\r\n          return {\r\n            textDecoration: 'none'\r\n          };\r\n        }\r\n        return {\r\n          textDecoration: 'line-through'\r\n        };\r\n      },\r\n      goPrevious() {\r\n        let vm = this;\r\n        vm.openLoadingContained(\"#button-with-loading\")\r\n        if ((vm.current_question_index != 0)) vm.current_question_index--;\r\n        vm.closeLoadingContained(\"#button-with-loading > .con-vs-loading\")\r\n      },\r\n      goNext() {\r\n        let vm = this;\r\n        vm.openLoadingContained(\"#button-with-loading2\");\r\n        let current_question = vm.dataModel.questions[vm.current_question_index];\r\n        // if (!current_question.question.has_answered) {\r\n        //   window.helper.showMessage('danger', vm, vm.$ml.get('should_ans'));\r\n        // } else {\r\n        let question_length = vm.dataModel.questions.length - 1;\r\n        if (question_length > vm.current_question_index) vm.current_question_index++;\r\n        // }\r\n        vm.closeLoadingContained(\"#button-with-loading2 > .con-vs-loading\")\r\n      },\r\n      prepareData(request_data) {\r\n        // request_data.questions[0].question.answers\r\n\r\n        let exams = [];\r\n\r\n        _.each(request_data.questions, (questionItem, key) => {\r\n\r\n          _.each(questionItem.question.answers, (answerItem, key) => {\r\n            if (questionItem.question.type == 'text') answerItem.is_correct = 1\r\n            if (answerItem.answer_value) {\r\n              exams.push({\r\n                id: questionItem.id,\r\n                answer: questionItem.question.type == 'text' ? answerItem.answer_value : answerItem.id,\r\n                is_correct: answerItem.is_correct ? 1 : 0\r\n              })\r\n            }\r\n          });\r\n        });\r\n        exams = _.filter(exams, function (o) {\r\n          if (o.is_correct) return o;\r\n        });\r\n        return {\r\n          id: request_data.id,\r\n          questions: exams\r\n        }\r\n      },\r\n      finishExam() {\r\n        let vm = this;\r\n        // vm.openLoadingContained(\"#button-with-loading3\")\r\n        let request_data = vm.dataModel;\r\n        let data_to_send = vm.prepareData(request_data);\r\n        console.log(vm.dataModel.questions.length, data_to_send.questions.length)\r\n        if (vm.dataModel.questions.length != data_to_send.questions.length) {\r\n          window.helper.showMessage('danger', vm, 'عليك الاجابة على السؤال اولا');\r\n        }\r\n        // return;\r\n        $('.span-text-validation').text('');\r\n        try {\r\n          window.serviceAPI.API().post(window.serviceAPI.UPDATE_STUDENT_EXAM, data_to_send)\r\n            .then((response) => {\r\n              response = response.data;\r\n              if (response.status) {\r\n                window.helper.showMessage('success', vm);\r\n                window.ls.clearAllStorage('current_exam');\r\n                vm.$router.push({name: 'student_exam_result', params: {id: request_data.id}});\r\n                return null;\r\n              }\r\n              location.reload()\r\n              vm.closeLoadingContained(\"#button-with-loading3 > .con-vs-loading\");\r\n            }).catch((error) => {\r\n            vm.closeLoadingContained(\"#button-with-loading3 > .con-vs-loading\");\r\n            window.helper.handleError(error, vm);\r\n          });\r\n        } catch (e) {\r\n          console.log(e)\r\n        }\r\n      },\r\n      examTimer(start, duration) {\r\n        start = this.$moment(start, 'YYYY-MM-DD HH:mm')\r\n        let end_at = start.add(duration, 'minutes')\r\n        return this.diffTwoDates(end_at.format('YYYY-MM-DD HH:mm'), new Date())\r\n      },\r\n      diffTwoDates(start, end) {\r\n        start = this.$moment(start, 'YYYY.MM.DD HH:mm')\r\n        end = this.$moment(end, 'YYYY.MM.DD HH:mm')\r\n        let seconds = start.diff(end, 'seconds');\r\n        if (seconds < 0) {\r\n          return {\r\n            minutes: 0,\r\n            seconds: 0,\r\n            _seconds: 0,\r\n          }\r\n        }\r\n        return this.fancyTimeFormat(seconds)\r\n      },\r\n      fancyTimeFormat(time) {\r\n        // // Hours, minutes and seconds\r\n        // var hrs = ~~(time / 3600);\r\n        let mins = ~~((time % 3600) / 60);\r\n        let secs = ~~time % 60;\r\n        //\r\n        // var ret = \"\";\r\n        //\r\n        // // if (hrs > 0) {\r\n        // //   ret += \"\" + hrs + \":\" + (mins < 10 ? \"0\" : \"\");\r\n        // // }\r\n        //\r\n        // ret += \"\" + mins + \":\" + (secs < 10 ? \"0\" : \"\");\r\n        // ret += \"\" + secs;\r\n        return {\r\n          minutes: mins,\r\n          seconds: secs,\r\n          _seconds: time,\r\n        };\r\n      },\r\n      openLoadingContained(selector) {\r\n        this.loading = true;\r\n        this.$vs.loading({\r\n          background: '#000',\r\n          color: '#fff',\r\n          container: selector,\r\n          scale: 0.45\r\n        })\r\n      },\r\n      closeLoadingContained(selector) {\r\n        setTimeout(() => {\r\n          this.loading = false;\r\n          this.$vs.loading.close(selector)\r\n        }, 1000);\r\n      },\r\n    },\r\n  }\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n  [id^=radio-] {\r\n    display: none;\r\n  }\r\n\r\n  [id^=radio-] + label {\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n    font-size: 50px;\r\n    color: #555;\r\n    cursor: pointer;\r\n    filter: grayscale(100%);\r\n  }\r\n\r\n  [id^=radio-]:checked + label {\r\n    color: tomato;\r\n    cursor: text;\r\n    filter: grayscale(0);\r\n  }\r\n\r\n</style>\r\n"],"sourceRoot":"src/views/Students/Exam"}]}