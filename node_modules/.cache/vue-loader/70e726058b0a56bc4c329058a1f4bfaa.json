{"remainingRequest":"/home/muhammadawd/WebstormProjects/Guardian/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/muhammadawd/WebstormProjects/Guardian/src/views/Management/Stage/Add/Index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/muhammadawd/WebstormProjects/Guardian/src/views/Management/Stage/Add/Index.vue","mtime":1579005344458},{"path":"/home/muhammadawd/WebstormProjects/Guardian/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/muhammadawd/WebstormProjects/Guardian/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/muhammadawd/WebstormProjects/Guardian/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/muhammadawd/WebstormProjects/Guardian/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Multiselect from 'vue-multiselect'\nimport 'vue-multiselect/dist/vue-multiselect.min.css'\n\nexport default {\n  components: {\n    Multiselect\n  },\n  data() {\n    return {\n      dataModel: {\n        title_ar: '',\n        title_en: '',\n        class_rooms: []\n      },\n      subjects: [],\n      selectedSubjects: [],\n      loading: false\n    }\n  },\n  computed: {},\n  mounted() {\n    this.getAllSubjects()\n  },\n  methods: {\n    customLabel({translated}) {\n      return `${translated.title}`\n    },\n    removeOption(id) {\n      const vm = this;\n      let data = vm.dataModel.class_rooms;\n      vm.dataModel.class_rooms = _.remove(data, (o, i) => {\n        return i == id;\n      });\n      vm.dataModel.class_rooms = data;\n    },\n    addOption() {\n      const vm = this;\n      vm.dataModel.class_rooms.push(\n        {\n          title_ar: '',\n          title_en: '',\n          size: ''\n        }\n      );\n    },\n    addStageValues() {\n      const vm = this;\n      vm.openLoadingContained();\n      let request_data = vm.dataModel;\n      let subject_ids = vm.selectedSubjects;\n      let ids = _.map(subject_ids, 'id');\n      request_data.subject_ids = ids;\n      $('.span-text-validation').text('');\n      try {\n        window.serviceAPI.API().post(window.serviceAPI.ADD_STAGES, request_data)\n          .then((response) => {\n            response = response.data;\n            if (response.status) {\n              window.helper.showMessage('success', vm);\n              vm.$router.push({name: 'management_stages'});\n              return null;\n            }\n            vm.closeLoadingContained()\n          }).catch((error) => {\n          vm.closeLoadingContained()\n          window.helper.handleError(error, vm);\n        });\n      } catch (e) {\n        console.log(e)\n      }\n    },\n    getAllSubjects() {\n      let vm = this;\n      vm.$root.$children[0].$refs.loader.show_loader = true;\n      try {\n        window.serviceAPI.API().get(window.serviceAPI.ALL_SUBJECTS)\n          .then((response) => {\n            vm.$root.$children[0].$refs.loader.show_loader = false;\n            response = response.data;\n            console.log(response)\n            if (response.status) {\n              vm.subjects = response.data.subjects.data;\n              return\n            }\n            vm.subjects = [];\n          }).catch((error) => {\n          vm.$root.$children[0].$refs.loader.show_loader = false;\n          window.helper.handleError(error, vm);\n          vm.subjects = [];\n        });\n      } catch (e) {\n        console.log(e)\n      }\n    },\n    openLoadingContained() {\n      this.loading = true;\n      this.$vs.loading({\n        background: '#000',\n        color: '#fff',\n        container: \"#button-with-loading\",\n        scale: 0.45\n      })\n    },\n    closeLoadingContained() {\n      setTimeout(() => {\n        this.loading = false;\n        this.$vs.loading.close(\"#button-with-loading > .con-vs-loading\")\n      }, 100);\n    },\n  },\n}\n",{"version":3,"sources":["Index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"Index.vue","sourceRoot":"src/views/Management/Stage/Add","sourcesContent":["<!-- =========================================================================================\r\n    File Name: KnowledgeBase.vue\r\n    Description: Knowledge Base Page\r\n    ----------------------------------------------------------------------------------------\r\n    Item Name: Vuesax Admin - VueJS Dashboard Admin Template\r\n      Author: Pixinvent\r\n    Author URL: http://www.themeforest.net/user/pixinvent\r\n========================================================================================== -->\r\n\r\n\r\n<template>\r\n  <div id=\"knowledge-base-page\">\r\n    <!-- KNOWLEDGE BASE CARDS  -->\r\n    <div class=\"vx-row\">\r\n      <div class=\"vx-col w-full md:w-1/1 mb-base\">\r\n        <vx-card class=\"text-right\">\r\n          <vs-alert class=\"mb-4\" color=\"dark\">\r\n            <span class=\"text-bold\">{{$ml.get('add_stages')}}</span>\r\n          </vs-alert>\r\n\r\n          <div class=\"vx-row\">\r\n            <div class=\"vx-col md:w-1/2 mb-base\">\r\n              <label class=\"vs-input--label\">{{$ml.get('subjects')}}</label>\r\n              <multiselect v-model=\"selectedSubjects\" :options=\"subjects\" :multiple=\"true\" :close-on-select=\"false\"\r\n                           :clear-on-select=\"false\" :preserve-search=\"true\" :placeholder=\"$ml.get('search')\"\r\n                           :custom-label=\"customLabel\"\r\n                           track-by=\"id\" :preselect-first=\"true\">\r\n              </multiselect>\r\n              <span class=\"span-text-validation text-danger text-bold\" id=\"subject_ids_error\"></span>\r\n            </div>\r\n          </div>\r\n          <div class=\"vx-row\">\r\n            <div class=\"vx-col md:w-1/4 mb-base\">\r\n              <vs-input class=\"w-full\" :label=\"$ml.get('title_ar')\" v-model=\"dataModel.title_ar\"/>\r\n              <span class=\"span-text-validation text-danger text-bold\" id=\"title_ar_error\"></span>\r\n            </div>\r\n            <div class=\"vx-col md:w-1/4 mb-base\">\r\n              <vs-input class=\"w-full\" :label=\"$ml.get('title_en')\" v-model=\"dataModel.title_en\"/>\r\n              <span class=\"span-text-validation text-danger text-bold\" id=\"title_en_error\"></span>\r\n            </div>\r\n          </div>\r\n          <div class=\"vx-row\">\r\n            <div class=\"vx-col w-full text-center mb-base\">\r\n              <div class=\"text-right\">\r\n                <vs-button type=\"border\" color=\"primary\" @click=\"addOption()\">\r\n                  <i class=\"fa fa-plus\"></i>\r\n                </vs-button>\r\n              </div>\r\n              <span class=\"span-text-validation text-danger text-bold\" id=\"class_rooms_error\"></span>\r\n              <vs-table :data=\"dataModel.class_rooms\">\r\n\r\n                <template slot=\"thead\">\r\n                  <vs-th></vs-th>\r\n                  <vs-th>{{$ml.get('title_ar')}}</vs-th>\r\n                  <vs-th>{{$ml.get('title_en')}}</vs-th>\r\n                  <vs-th>{{$ml.get('size')}}</vs-th>\r\n                </template>\r\n\r\n                <template slot-scope=\"{data}\">\r\n                  <vs-tr :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n                    <vs-td>\r\n                      <vs-button type=\"border\" color=\"danger\" @click=\"removeOption(indextr)\">\r\n                        <i class=\"fa fa-minus\"></i>\r\n                      </vs-button>\r\n                    </vs-td>\r\n                    <vs-td class=\"text-right\">\r\n                      <vs-input class=\"w-full\" v-model=\"dataModel.class_rooms[indextr].title_ar\"/>\r\n                      <span class=\"span-text-validation text-danger text-bold\"\r\n                            :id=\"'class_rooms.'+indextr+'.title_ar_error'\"></span>\r\n                    </vs-td>\r\n                    <vs-td class=\"text-right\">\r\n                      <vs-input class=\"w-full\" v-model=\"dataModel.class_rooms[indextr].title_en\"/>\r\n                      <span class=\"span-text-validation text-danger text-bold\"\r\n                            :id=\"'class_rooms.'+indextr+'.title_en_error'\"></span>\r\n                    </vs-td>\r\n                    <vs-td class=\"text-right\">\r\n                      <vs-input class=\"w-full\" v-model=\"dataModel.class_rooms[indextr].size\"/>\r\n                      <span class=\"span-text-validation text-danger text-bold\"\r\n                            :id=\"'class_rooms.'+indextr+'.size_error'\"></span>\r\n                    </vs-td>\r\n                  </vs-tr>\r\n                </template>\r\n              </vs-table>\r\n            </div>\r\n          </div>\r\n          <div class=\"vx-row\">\r\n            <div class=\"vx-col w-full text-center mb-base\">\r\n              <vs-button ref=\"loadableButton\" id=\"button-with-loading\" :disabled=\"loading\"\r\n                         class=\"vs-con-loading__container vs-button-dark text-bold\"\r\n                         @click=\"addStageValues\" type=\"filled\" vslor=\"primary\">\r\n                {{$ml.get('add')}}\r\n              </vs-button>\r\n            </div>\r\n          </div>\r\n        </vx-card>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import Multiselect from 'vue-multiselect'\r\n  import 'vue-multiselect/dist/vue-multiselect.min.css'\r\n\r\n  export default {\r\n    components: {\r\n      Multiselect\r\n    },\r\n    data() {\r\n      return {\r\n        dataModel: {\r\n          title_ar: '',\r\n          title_en: '',\r\n          class_rooms: []\r\n        },\r\n        subjects: [],\r\n        selectedSubjects: [],\r\n        loading: false\r\n      }\r\n    },\r\n    computed: {},\r\n    mounted() {\r\n      this.getAllSubjects()\r\n    },\r\n    methods: {\r\n      customLabel({translated}) {\r\n        return `${translated.title}`\r\n      },\r\n      removeOption(id) {\r\n        const vm = this;\r\n        let data = vm.dataModel.class_rooms;\r\n        vm.dataModel.class_rooms = _.remove(data, (o, i) => {\r\n          return i == id;\r\n        });\r\n        vm.dataModel.class_rooms = data;\r\n      },\r\n      addOption() {\r\n        const vm = this;\r\n        vm.dataModel.class_rooms.push(\r\n          {\r\n            title_ar: '',\r\n            title_en: '',\r\n            size: ''\r\n          }\r\n        );\r\n      },\r\n      addStageValues() {\r\n        const vm = this;\r\n        vm.openLoadingContained();\r\n        let request_data = vm.dataModel;\r\n        let subject_ids = vm.selectedSubjects;\r\n        let ids = _.map(subject_ids, 'id');\r\n        request_data.subject_ids = ids;\r\n        $('.span-text-validation').text('');\r\n        try {\r\n          window.serviceAPI.API().post(window.serviceAPI.ADD_STAGES, request_data)\r\n            .then((response) => {\r\n              response = response.data;\r\n              if (response.status) {\r\n                window.helper.showMessage('success', vm);\r\n                vm.$router.push({name: 'management_stages'});\r\n                return null;\r\n              }\r\n              vm.closeLoadingContained()\r\n            }).catch((error) => {\r\n            vm.closeLoadingContained()\r\n            window.helper.handleError(error, vm);\r\n          });\r\n        } catch (e) {\r\n          console.log(e)\r\n        }\r\n      },\r\n      getAllSubjects() {\r\n        let vm = this;\r\n        vm.$root.$children[0].$refs.loader.show_loader = true;\r\n        try {\r\n          window.serviceAPI.API().get(window.serviceAPI.ALL_SUBJECTS)\r\n            .then((response) => {\r\n              vm.$root.$children[0].$refs.loader.show_loader = false;\r\n              response = response.data;\r\n              console.log(response)\r\n              if (response.status) {\r\n                vm.subjects = response.data.subjects.data;\r\n                return\r\n              }\r\n              vm.subjects = [];\r\n            }).catch((error) => {\r\n            vm.$root.$children[0].$refs.loader.show_loader = false;\r\n            window.helper.handleError(error, vm);\r\n            vm.subjects = [];\r\n          });\r\n        } catch (e) {\r\n          console.log(e)\r\n        }\r\n      },\r\n      openLoadingContained() {\r\n        this.loading = true;\r\n        this.$vs.loading({\r\n          background: '#000',\r\n          color: '#fff',\r\n          container: \"#button-with-loading\",\r\n          scale: 0.45\r\n        })\r\n      },\r\n      closeLoadingContained() {\r\n        setTimeout(() => {\r\n          this.loading = false;\r\n          this.$vs.loading.close(\"#button-with-loading > .con-vs-loading\")\r\n        }, 100);\r\n      },\r\n    },\r\n  }\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n</style>\r\n"]}]}