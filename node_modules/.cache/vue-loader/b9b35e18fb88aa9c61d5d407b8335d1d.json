{"remainingRequest":"/home/muhammadawd/WebstormProjects/Guardian/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/muhammadawd/WebstormProjects/Guardian/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/muhammadawd/WebstormProjects/Guardian/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/muhammadawd/WebstormProjects/Guardian/src/views/QuestionsBank/Edit/Index.vue?vue&type=template&id=d6899426&","dependencies":[{"path":"/home/muhammadawd/WebstormProjects/Guardian/src/views/QuestionsBank/Edit/Index.vue","mtime":1580626863671},{"path":"/home/muhammadawd/WebstormProjects/Guardian/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/muhammadawd/WebstormProjects/Guardian/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/muhammadawd/WebstormProjects/Guardian/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/muhammadawd/WebstormProjects/Guardian/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { attrs: { id: \"knowledge-base-page\" } }, [\n    _c(\"div\", { staticClass: \"vx-row\" }, [\n      _c(\n        \"div\",\n        { staticClass: \"vx-col w-full md:w-1/1 mb-base\" },\n        [\n          _c(\n            \"vx-card\",\n            { staticClass: \"text-right\" },\n            [\n              _c(\n                \"vs-alert\",\n                { staticClass: \"mb-4\", attrs: { color: \"dark\" } },\n                [\n                  _c(\"span\", { staticClass: \"text-bold\" }, [\n                    _vm._v(_vm._s(_vm.$ml.get(\"edit_questions_bank\")))\n                  ])\n                ]\n              ),\n              _c(\"div\", { staticClass: \"vx-row\" }, [\n                _c(\n                  \"div\",\n                  { staticClass: \"vx-col md:w-1/4 mb-base\" },\n                  [\n                    _c(\"vs-input\", {\n                      staticClass: \"w-full\",\n                      attrs: { label: _vm.$ml.get(\"question_degree\") },\n                      model: {\n                        value: _vm.dataModel.degree,\n                        callback: function($$v) {\n                          _vm.$set(_vm.dataModel, \"degree\", $$v)\n                        },\n                        expression: \"dataModel.degree\"\n                      }\n                    }),\n                    _c(\"span\", {\n                      staticClass: \"span-text-validation text-danger text-bold\",\n                      attrs: { id: \"degree_error\" }\n                    })\n                  ],\n                  1\n                ),\n                _c(\n                  \"div\",\n                  { staticClass: \"vx-col md:w-1/4 mb-base\" },\n                  [\n                    _c(\n                      \"vs-select\",\n                      {\n                        staticClass: \"w-full\",\n                        attrs: { label: _vm.$ml.get(\"question_type\") },\n                        on: {\n                          change: function($event) {\n                            return _vm.changeQuestionType()\n                          }\n                        },\n                        model: {\n                          value: _vm.dataModel.type,\n                          callback: function($$v) {\n                            _vm.$set(_vm.dataModel, \"type\", $$v)\n                          },\n                          expression: \"dataModel.type\"\n                        }\n                      },\n                      [\n                        _c(\"vs-select-item\", {\n                          attrs: { value: \"mcq\", text: _vm.$ml.get(\"mcq\") }\n                        }),\n                        _c(\"vs-select-item\", {\n                          attrs: {\n                            value: \"true_false\",\n                            text: _vm.$ml.get(\"true_false\")\n                          }\n                        }),\n                        _c(\"vs-select-item\", {\n                          attrs: { value: \"text\", text: _vm.$ml.get(\"_text\") }\n                        })\n                      ],\n                      1\n                    ),\n                    _c(\"span\", {\n                      staticClass: \"span-text-validation text-danger text-bold\",\n                      attrs: { id: \"type_error\" }\n                    })\n                  ],\n                  1\n                ),\n                _c(\n                  \"div\",\n                  { staticClass: \"vx-col md:w-1/4 mb-base\" },\n                  [\n                    _c(\"label\", { staticClass: \"vs-input--label\" }, [\n                      _vm._v(_vm._s(_vm.$ml.get(\"subjects\")))\n                    ]),\n                    _c(\"multiselect\", {\n                      attrs: {\n                        options: _vm.subjects,\n                        multiple: false,\n                        \"close-on-select\": true,\n                        \"clear-on-select\": false,\n                        \"preserve-search\": true,\n                        placeholder: _vm.$ml.get(\"search\"),\n                        \"custom-label\": _vm.customLabel,\n                        \"track-by\": \"id\",\n                        \"preselect-first\": true\n                      },\n                      model: {\n                        value: _vm.selectedSubjects,\n                        callback: function($$v) {\n                          _vm.selectedSubjects = $$v\n                        },\n                        expression: \"selectedSubjects\"\n                      }\n                    }),\n                    _c(\"span\", {\n                      staticClass: \"span-text-validation text-danger text-bold\",\n                      attrs: { id: \"subject_id_error\" }\n                    })\n                  ],\n                  1\n                ),\n                _c(\n                  \"div\",\n                  { staticClass: \"vx-col md:w-1/4 mb-base\" },\n                  [\n                    _c(\"label\", { staticClass: \"vs-input--label\" }, [\n                      _vm._v(_vm._s(_vm.$ml.get(\"stages\")))\n                    ]),\n                    _c(\"multiselect\", {\n                      attrs: {\n                        options: _vm.stages,\n                        multiple: false,\n                        \"close-on-select\": true,\n                        \"open-direction\": \"bottom\",\n                        \"clear-on-select\": false,\n                        \"preserve-search\": true,\n                        placeholder: _vm.$ml.get(\"search\"),\n                        \"custom-label\": _vm.customStageLabel,\n                        \"track-by\": \"id\",\n                        \"preselect-first\": true\n                      },\n                      model: {\n                        value: _vm.selectedStage,\n                        callback: function($$v) {\n                          _vm.selectedStage = $$v\n                        },\n                        expression: \"selectedStage\"\n                      }\n                    }),\n                    _c(\"span\", {\n                      staticClass: \"span-text-validation text-danger text-bold\",\n                      attrs: { id: \"stage_id_error\" }\n                    })\n                  ],\n                  1\n                ),\n                _c(\n                  \"div\",\n                  { staticClass: \"vx-col w-full mb-base\" },\n                  [\n                    _c(\"vs-textarea\", {\n                      attrs: { label: _vm.$ml.get(\"question\"), rows: \"5\" },\n                      model: {\n                        value: _vm.dataModel.name,\n                        callback: function($$v) {\n                          _vm.$set(_vm.dataModel, \"name\", $$v)\n                        },\n                        expression: \"dataModel.name\"\n                      }\n                    }),\n                    _c(\"span\", {\n                      staticClass: \"span-text-validation text-danger text-bold\",\n                      attrs: { id: \"name_error\" }\n                    })\n                  ],\n                  1\n                )\n              ]),\n              _c(\"span\", {\n                staticClass: \"span-text-validation text-danger text-bold\",\n                attrs: { id: \"answers_error\" }\n              }),\n              _vm.dataModel.type == \"mcq\"\n                ? _c(\"div\", { staticClass: \"vx-row\" }, [\n                    _c(\"div\", { staticClass: \"vx-col w-full mb-base\" }, [\n                      _c(\n                        \"div\",\n                        { staticClass: \"vx-col w-full mb-base\" },\n                        [\n                          _c(\"vs-button\", {\n                            staticClass: \"text-bold\",\n                            attrs: {\n                              color: \"primary\",\n                              type: \"filled\",\n                              \"icon-pack\": \"feather\",\n                              icon: \"icon-plus\"\n                            },\n                            on: {\n                              click: function($event) {\n                                return _vm.dataModel.answers.push({\n                                  value: \"\",\n                                  is_correct: 0\n                                })\n                              }\n                            }\n                          })\n                        ],\n                        1\n                      ),\n                      _c(\"div\", { staticClass: \"vx-col w-full mb-base\" }, [\n                        _c(\n                          \"div\",\n                          { staticClass: \"vx-row\" },\n                          _vm._l(_vm.dataModel.answers, function(answer, key) {\n                            return _c(\n                              \"div\",\n                              {\n                                key: key,\n                                staticClass: \"vx-col md:w-1/4 mb-base\"\n                              },\n                              [\n                                _c(\n                                  \"label\",\n                                  { staticClass: \"vs-input--label\" },\n                                  [\n                                    _c(\"input\", {\n                                      directives: [\n                                        {\n                                          name: \"model\",\n                                          rawName: \"v-model\",\n                                          value:\n                                            _vm.dataModel.answers[key]\n                                              .is_correct,\n                                          expression:\n                                            \"dataModel.answers[key].is_correct\"\n                                        }\n                                      ],\n                                      attrs: { type: \"checkbox\", value: \"1\" },\n                                      domProps: {\n                                        checked: Array.isArray(\n                                          _vm.dataModel.answers[key].is_correct\n                                        )\n                                          ? _vm._i(\n                                              _vm.dataModel.answers[key]\n                                                .is_correct,\n                                              \"1\"\n                                            ) > -1\n                                          : _vm.dataModel.answers[key]\n                                              .is_correct\n                                      },\n                                      on: {\n                                        change: function($event) {\n                                          var $$a =\n                                              _vm.dataModel.answers[key]\n                                                .is_correct,\n                                            $$el = $event.target,\n                                            $$c = $$el.checked ? true : false\n                                          if (Array.isArray($$a)) {\n                                            var $$v = \"1\",\n                                              $$i = _vm._i($$a, $$v)\n                                            if ($$el.checked) {\n                                              $$i < 0 &&\n                                                _vm.$set(\n                                                  _vm.dataModel.answers[key],\n                                                  \"is_correct\",\n                                                  $$a.concat([$$v])\n                                                )\n                                            } else {\n                                              $$i > -1 &&\n                                                _vm.$set(\n                                                  _vm.dataModel.answers[key],\n                                                  \"is_correct\",\n                                                  $$a\n                                                    .slice(0, $$i)\n                                                    .concat($$a.slice($$i + 1))\n                                                )\n                                            }\n                                          } else {\n                                            _vm.$set(\n                                              _vm.dataModel.answers[key],\n                                              \"is_correct\",\n                                              $$c\n                                            )\n                                          }\n                                        }\n                                      }\n                                    }),\n                                    _vm._v(\n                                      \"\\n                    \" +\n                                        _vm._s(_vm.$ml.get(\"answer\")) +\n                                        \"\\n                  \"\n                                    )\n                                  ]\n                                ),\n                                _c(\"vs-input\", {\n                                  staticClass: \"w-full\",\n                                  model: {\n                                    value: _vm.dataModel.answers[key].value,\n                                    callback: function($$v) {\n                                      _vm.$set(\n                                        _vm.dataModel.answers[key],\n                                        \"value\",\n                                        $$v\n                                      )\n                                    },\n                                    expression: \"dataModel.answers[key].value\"\n                                  }\n                                })\n                              ],\n                              1\n                            )\n                          }),\n                          0\n                        )\n                      ])\n                    ])\n                  ])\n                : _vm._e(),\n              _vm.dataModel.type == \"true_false\"\n                ? _c(\"div\", { staticClass: \"vx-row\" }, [\n                    _c(\n                      \"div\",\n                      { staticClass: \"vx-col md:w-1/4 mb-base\" },\n                      [\n                        _c(\n                          \"vs-select\",\n                          {\n                            staticClass: \"w-full\",\n                            attrs: { label: _vm.$ml.get(\"answer\") },\n                            on: {\n                              change: function($event) {\n                                return _vm.changeQuestionTruefalse()\n                              }\n                            },\n                            model: {\n                              value: _vm.dataModel.true_false,\n                              callback: function($$v) {\n                                _vm.$set(_vm.dataModel, \"true_false\", $$v)\n                              },\n                              expression: \"dataModel.true_false\"\n                            }\n                          },\n                          [\n                            _c(\"vs-select-item\", {\n                              attrs: {\n                                value: \"true\",\n                                text: _vm.$ml.get(\"true\")\n                              }\n                            }),\n                            _c(\"vs-select-item\", {\n                              attrs: {\n                                value: \"false\",\n                                text: _vm.$ml.get(\"false\")\n                              }\n                            })\n                          ],\n                          1\n                        )\n                      ],\n                      1\n                    )\n                  ])\n                : _vm._e(),\n              _vm.dataModel.type == \"text\"\n                ? _c(\"div\", { staticClass: \"vx-row\" }, [\n                    _vm.dataModel.answers[0]\n                      ? _c(\n                          \"div\",\n                          { staticClass: \"vx-col w-full mb-base\" },\n                          [\n                            _c(\"input\", {\n                              directives: [\n                                {\n                                  name: \"model\",\n                                  rawName: \"v-model\",\n                                  value: _vm.dataModel.answers[0].is_correct,\n                                  expression: \"dataModel.answers[0].is_correct\"\n                                }\n                              ],\n                              attrs: { type: \"hidden\", value: \"1\" },\n                              domProps: {\n                                value: _vm.dataModel.answers[0].is_correct\n                              },\n                              on: {\n                                input: function($event) {\n                                  if ($event.target.composing) {\n                                    return\n                                  }\n                                  _vm.$set(\n                                    _vm.dataModel.answers[0],\n                                    \"is_correct\",\n                                    $event.target.value\n                                  )\n                                }\n                              }\n                            }),\n                            _c(\"vs-textarea\", {\n                              attrs: {\n                                label: _vm.$ml.get(\"answer\"),\n                                rows: \"5\"\n                              },\n                              model: {\n                                value: _vm.dataModel.answers[0].value,\n                                callback: function($$v) {\n                                  _vm.$set(\n                                    _vm.dataModel.answers[0],\n                                    \"value\",\n                                    $$v\n                                  )\n                                },\n                                expression: \"dataModel.answers[0].value\"\n                              }\n                            })\n                          ],\n                          1\n                        )\n                      : _vm._e()\n                  ])\n                : _vm._e(),\n              _c(\"div\", { staticClass: \"vx-row\" }, [\n                _c(\n                  \"div\",\n                  { staticClass: \"vx-col w-full text-center mb-base\" },\n                  [\n                    _c(\n                      \"vs-button\",\n                      {\n                        ref: \"loadableButton\",\n                        staticClass:\n                          \"vs-con-loading__container vs-button-dark text-bold\",\n                        attrs: {\n                          id: \"button-with-loading\",\n                          disabled: _vm.loading,\n                          type: \"filled\",\n                          vslor: \"primary\"\n                        },\n                        on: { click: _vm.editQuestion }\n                      },\n                      [\n                        _vm._v(\n                          \"\\n              \" +\n                            _vm._s(_vm.$ml.get(\"edit\")) +\n                            \"\\n            \"\n                        )\n                      ]\n                    )\n                  ],\n                  1\n                )\n              ])\n            ],\n            1\n          )\n        ],\n        1\n      )\n    ])\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}