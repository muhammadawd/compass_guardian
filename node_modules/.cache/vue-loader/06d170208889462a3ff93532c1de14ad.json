{"remainingRequest":"/home/muhammadawd/WebstormProjects/Guardian/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/muhammadawd/WebstormProjects/Guardian/src/layouts/components/vx-sidebar/VxSidebarGroup.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/muhammadawd/WebstormProjects/Guardian/src/layouts/components/vx-sidebar/VxSidebarGroup.vue","mtime":1581332192189},{"path":"/home/muhammadawd/WebstormProjects/Guardian/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/muhammadawd/WebstormProjects/Guardian/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/muhammadawd/WebstormProjects/Guardian/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/muhammadawd/WebstormProjects/Guardian/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/muhammadawd/WebstormProjects/Guardian/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport VxSidebarItem from './VxSidebarItem.vue'\n\nexport default {\n  name: 'vx-sidebar-group',\n  props: {\n    openHover: {\n      default: false,\n      type: Boolean\n    },\n    open: {\n      default: false,\n      type: Boolean\n    },\n    permission: {\n      default: 'ALLOW_ALL',\n      type: String\n    },\n    group: {\n      type: Object\n    },\n    groupIndex: {\n      type: Number,\n    },\n  },\n  data: () => ({\n    maxHeight: '0px',\n    openItems: false\n  }),\n  computed: {\n    sidebarItemsMin() {\n      return this.$store.state.sidebarItemsMin;\n    },\n    styleItems() {\n      return {\n        maxHeight: this.maxHeight\n      }\n    },\n    itemIcon() {\n      return (index) => {\n        if (!((index.match(/\\./g) || []).length > 1)) return \"CircleIcon\"\n      }\n    },\n    isGroupActive() {\n      return (sidebarItem) => {\n\n        const path = this.$route.fullPath;\n        let open = false;\n        let func = function (sidebarItem) {\n          if (sidebarItem.submenu) {\n            sidebarItem.submenu.forEach((item) => {\n              if (path == item.url) {\n                open = true\n              } else if (item.submenu) {\n                func(item)\n              }\n            })\n          }\n        }\n\n        func(sidebarItem)\n        return open\n      }\n    },\n  },\n  watch: {\n    // OPEN & CLOSES DROPDOWN ON ROUTE CHANGE\n    '$route'() {\n      if (this.sidebarItemsMin) return\n      let scrollHeight = this.scrollHeight\n      if (this.openItems && !this.open) {\n        this.maxHeight = `${scrollHeight}px`\n        setTimeout(() => {\n          this.maxHeight = `${0}px`\n        }, 50)\n      } else if (this.open) {\n        this.maxHeight = `${scrollHeight}px`\n        setTimeout(() => {\n          this.maxHeight = 'none'\n        }, 300)\n      }\n    },\n    maxHeight() {\n      this.openItems = this.maxHeight != '0px'\n    },\n    // OPEN AND CLOSES DROPDOWN MENU ON SIDEBAR COLLAPSE AND DEFAULT VIEW\n    '$store.state.sidebarItemsMin'(val) {\n      let scrollHeight = this.$refs.items.scrollHeight\n      if (!val && this.open) {\n        this.maxHeight = `${scrollHeight}px`\n        setTimeout(() => {\n          this.maxHeight = 'none'\n        }, 300)\n      } else {\n        this.maxHeight = `${scrollHeight}px`\n        setTimeout(() => {\n          this.maxHeight = '0px'\n        }, 50)\n      }\n      if (val && this.open) {\n        this.maxHeight = `${scrollHeight}px`\n        setTimeout(() => {\n          this.maxHeight = '0px'\n        }, 250)\n      }\n    }\n  },\n  methods: {\n    hasAccessPermission(permission) {\n      return window.helper.hasAccessPermission(permission);\n    },\n    clickGroup() {\n      if (!this.openHover) {\n        let thisScrollHeight = this.$refs.items.scrollHeight\n        if (this.maxHeight == '0px') {\n          this.maxHeight = `${thisScrollHeight}px`\n          setTimeout(() => {\n            this.maxHeight = 'none'\n          }, 300)\n        } else {\n          this.maxHeight = `${thisScrollHeight}px`\n          setTimeout(() => {\n            this.maxHeight = `${0}px`\n          }, 50)\n        }\n\n        this.$parent.$children.map((child) => {\n          if (child.isGroupActive) {\n\n            if (child !== this && (!child.open) && child.maxHeight != '0px') {\n              setTimeout(() => {\n                child.maxHeight = `${0}px`\n              }, 50)\n            }\n          }\n        })\n\n\n      }\n    },\n    mouseover() {\n      if (this.openHover) {\n        let scrollHeight = this.$refs.items.scrollHeight\n        this.maxHeight = `${scrollHeight}px`\n      }\n    },\n    mouseout() {\n      if (this.openHover) {\n        let scrollHeight = 0\n        this.maxHeight = `${scrollHeight}px`\n      }\n    }\n  },\n  components: {\n    VxSidebarItem\n  },\n  mounted() {\n    this.openItems = this.open\n    if (this.open) {\n      this.maxHeight = 'none'\n    }\n  },\n}\n",{"version":3,"sources":["VxSidebarGroup.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VxSidebarGroup.vue","sourceRoot":"src/layouts/components/vx-sidebar","sourcesContent":["<!-- =========================================================================================\n\tFile Name: VxSidebarGroup.vue\n\tDescription: Sidebar Group Component. Extends vuesax framework's 'vs-sidebar-group' component\n\tComponent Name: VxSidebarGroup\n\t----------------------------------------------------------------------------------------\n\tItem Name: Vuesax Admin - VueJS Dashboard Admin Template\n\tAuthor: Pixinvent\n\tAuthor URL: http://www.themeforest.net/user/pixinvent\n========================================================================================== -->\n\n\n<template>\n  <div\n    :class=\"[{'vs-sidebar-group-open' : openItems}, {'vs-sidebar-group-active': open}, {'disabled-item pointer-events-none': group.isDisabled}]\"\n    class=\"vs-sidebar-group\"\n    @mouseover=\"mouseover\"\n    @mouseout=\"mouseout\">\n    <div @click=\"clickGroup\" class=\"group-header w-full\">\n\t\t<span class=\"flex items-center w-full\">\n\t\t\t<feather-icon :icon=\"group.icon || 'CircleIcon'\" :svgClasses=\"{ 'w-3 h-3' : this.groupIndex % 1 != 0 }\"\n                    v-if=\"group.icon || (this.groupIndex > Math.floor(this.groupIndex))\"/>\n\t\t\t<span v-show=\"!sidebarItemsMin\" class=\"truncate mr-3 select-none\">{{ $ml.get(group.name) }}</span>\n\t\t\t<vs-chip class=\"ml-auto mr-4\" :color=\"group.tagColor\"\n               v-if=\"group.tag && !sidebarItemsMin\">{{ group.tag }}</vs-chip>\n\t\t</span>\n      <feather-icon icon=\"ChevronRightIcon\" svg-classes=\"w-4 h-4\"\n                    :class=\"[{'rotate90' : openItems}, 'feather-grp-header-arrow']\" v-show=\"!sidebarItemsMin\"/>\n      <span class=\"vs-sidebar--tooltip\">{{ group.name }}</span>\n    </div>\n    <ul ref=\"items\" :style=\"styleItems\" class=\"vs-sidebar-group-items\">\n      <li v-for=\"(groupItem, index) in group.submenu\" :key=\"index\" v-if=\"hasAccessPermission(groupItem.permission)\">\n        <vx-sidebar-group :group=\"groupItem\" :groupIndex=\"Number(`${groupIndex}.${index}`)\"\n                          :open=\"isGroupActive(groupItem)\" :openHover=\"openHover\" v-if=\"groupItem.submenu\"/>\n        <vx-sidebar-item :index=\"groupIndex + '.' + index\" :to=\"groupItem.url\"\n                         :icon=\"itemIcon(groupIndex + '.' + index)\" icon-small :target=\"groupItem.target\" v-else>\n          <span class=\"truncate\">{{ $ml.get(groupItem.name)  }}</span>\n          <vs-chip class=\"ml-auto\" :color=\"groupItem.tagColor\" v-if=\"groupItem.tag\">{{ groupItem.tag }}</vs-chip>\n        </vx-sidebar-item>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\n  import VxSidebarItem from './VxSidebarItem.vue'\n\n  export default {\n    name: 'vx-sidebar-group',\n    props: {\n      openHover: {\n        default: false,\n        type: Boolean\n      },\n      open: {\n        default: false,\n        type: Boolean\n      },\n      permission: {\n        default: 'ALLOW_ALL',\n        type: String\n      },\n      group: {\n        type: Object\n      },\n      groupIndex: {\n        type: Number,\n      },\n    },\n    data: () => ({\n      maxHeight: '0px',\n      openItems: false\n    }),\n    computed: {\n      sidebarItemsMin() {\n        return this.$store.state.sidebarItemsMin;\n      },\n      styleItems() {\n        return {\n          maxHeight: this.maxHeight\n        }\n      },\n      itemIcon() {\n        return (index) => {\n          if (!((index.match(/\\./g) || []).length > 1)) return \"CircleIcon\"\n        }\n      },\n      isGroupActive() {\n        return (sidebarItem) => {\n\n          const path = this.$route.fullPath;\n          let open = false;\n          let func = function (sidebarItem) {\n            if (sidebarItem.submenu) {\n              sidebarItem.submenu.forEach((item) => {\n                if (path == item.url) {\n                  open = true\n                } else if (item.submenu) {\n                  func(item)\n                }\n              })\n            }\n          }\n\n          func(sidebarItem)\n          return open\n        }\n      },\n    },\n    watch: {\n      // OPEN & CLOSES DROPDOWN ON ROUTE CHANGE\n      '$route'() {\n        if (this.sidebarItemsMin) return\n        let scrollHeight = this.scrollHeight\n        if (this.openItems && !this.open) {\n          this.maxHeight = `${scrollHeight}px`\n          setTimeout(() => {\n            this.maxHeight = `${0}px`\n          }, 50)\n        } else if (this.open) {\n          this.maxHeight = `${scrollHeight}px`\n          setTimeout(() => {\n            this.maxHeight = 'none'\n          }, 300)\n        }\n      },\n      maxHeight() {\n        this.openItems = this.maxHeight != '0px'\n      },\n      // OPEN AND CLOSES DROPDOWN MENU ON SIDEBAR COLLAPSE AND DEFAULT VIEW\n      '$store.state.sidebarItemsMin'(val) {\n        let scrollHeight = this.$refs.items.scrollHeight\n        if (!val && this.open) {\n          this.maxHeight = `${scrollHeight}px`\n          setTimeout(() => {\n            this.maxHeight = 'none'\n          }, 300)\n        } else {\n          this.maxHeight = `${scrollHeight}px`\n          setTimeout(() => {\n            this.maxHeight = '0px'\n          }, 50)\n        }\n        if (val && this.open) {\n          this.maxHeight = `${scrollHeight}px`\n          setTimeout(() => {\n            this.maxHeight = '0px'\n          }, 250)\n        }\n      }\n    },\n    methods: {\n      hasAccessPermission(permission) {\n        return window.helper.hasAccessPermission(permission);\n      },\n      clickGroup() {\n        if (!this.openHover) {\n          let thisScrollHeight = this.$refs.items.scrollHeight\n          if (this.maxHeight == '0px') {\n            this.maxHeight = `${thisScrollHeight}px`\n            setTimeout(() => {\n              this.maxHeight = 'none'\n            }, 300)\n          } else {\n            this.maxHeight = `${thisScrollHeight}px`\n            setTimeout(() => {\n              this.maxHeight = `${0}px`\n            }, 50)\n          }\n\n          this.$parent.$children.map((child) => {\n            if (child.isGroupActive) {\n\n              if (child !== this && (!child.open) && child.maxHeight != '0px') {\n                setTimeout(() => {\n                  child.maxHeight = `${0}px`\n                }, 50)\n              }\n            }\n          })\n\n\n        }\n      },\n      mouseover() {\n        if (this.openHover) {\n          let scrollHeight = this.$refs.items.scrollHeight\n          this.maxHeight = `${scrollHeight}px`\n        }\n      },\n      mouseout() {\n        if (this.openHover) {\n          let scrollHeight = 0\n          this.maxHeight = `${scrollHeight}px`\n        }\n      }\n    },\n    components: {\n      VxSidebarItem\n    },\n    mounted() {\n      this.openItems = this.open\n      if (this.open) {\n        this.maxHeight = 'none'\n      }\n    },\n  }\n</script>\n\n<style lang=\"scss\">\n  @import \"@/assets/scss/vuesax/components/vxSidebarGroup.scss\"\n</style>\n"]}]}