{"remainingRequest":"/home/muhammadawd/WebstormProjects/Guardian/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/muhammadawd/WebstormProjects/Guardian/src/views/TeacherExams/Add/Index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/muhammadawd/WebstormProjects/Guardian/src/views/TeacherExams/Add/Index.vue","mtime":1581417242786},{"path":"/home/muhammadawd/WebstormProjects/Guardian/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/muhammadawd/WebstormProjects/Guardian/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/muhammadawd/WebstormProjects/Guardian/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/muhammadawd/WebstormProjects/Guardian/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/muhammadawd/WebstormProjects/Guardian/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Multiselect from 'vue-multiselect'\nimport 'vue-multiselect/dist/vue-multiselect.min.css'\nimport flatPickr from 'vue-flatpickr-component';\nimport 'flatpickr/dist/flatpickr.css';\n\nexport default {\n  components: {\n    Multiselect, flatPickr\n  },\n  data() {\n    return {\n      dataModel: {},\n      timeConfig: {\n        enableTime: true,\n        time_24hr: true\n      },\n      teacher: {},\n      q_types: ['mcq', 'true_false', 'text'],\n      subjects: [],\n      selectedSubjects: null,\n      status: [],\n      selected: [],\n      stages: [],\n      selectedStage: null,\n      classRooms: [],\n      selectedClassRooms: null,\n      questions: [],\n      loading: false\n    }\n  }, watch: {\n    selectedStage: function (newStage, oldStage) {\n      // if (oldStage != null) {\n      this.selectedClassRooms = null;\n      this.classRooms = newStage.class_rooms;\n      // }\n    }\n  },\n  computed: {},\n  mounted() {\n    let auth_data = JSON.parse(window.ls.getFromStorage('auth_data'));\n    this.findId = auth_data.user.id;\n    this.findTeacher()\n    this.getAllStages()\n    this.getAllStatus()\n  },\n  methods: {\n    customLabel({translated}) {\n      return `${translated.title}`\n    },\n    customStageLabel({translated}) {\n      return `${translated.title}`\n    },\n    getAllStatus() {\n      let vm = this;\n      vm.$root.$children[0].$refs.loader.show_loader = true;\n      try {\n        window.serviceAPI.API().get(window.serviceAPI.ALL_STATUS)\n          .then((response) => {\n            vm.$root.$children[0].$refs.loader.show_loader = false;\n            response = response.data;\n            console.log(response)\n            if (response.status) {\n              vm.status = response.data.status.exam_status;\n              return\n            }\n            vm.status = [];\n          }).catch((error) => {\n          vm.$root.$children[0].$refs.loader.show_loader = false;\n          window.helper.handleError(error, vm);\n          vm.status = [];\n        });\n      } catch (e) {\n        console.log(e)\n      }\n    },\n    getAllStages() {\n      let vm = this;\n      vm.$root.$children[0].$refs.loader.show_loader = true;\n      try {\n        window.serviceAPI.API().get(window.serviceAPI.ALL_STAGES)\n          .then((response) => {\n            vm.$root.$children[0].$refs.loader.show_loader = false;\n            response = response.data;\n            if (response.status) {\n              vm.stages = response.data.stages.data;\n              // vm.classRooms = vm.stages.length > 0 ? vm.stages[0].class_rooms : [];\n              return\n            }\n            vm.stages = [];\n          }).catch((error) => {\n          vm.$root.$children[0].$refs.loader.show_loader = false;\n          window.helper.handleError(error, vm);\n          vm.stages = [];\n        });\n      } catch (e) {\n        console.log(e)\n      }\n    },\n    changeQuestionType() {\n      let vm = this;\n      console.log(vm.dataModel.question_type)\n    },\n    findTeacher() {\n\n      let vm = this;\n      let id = vm.findId;\n      vm.$root.$children[0].$refs.loader.show_loader = true;\n      try {\n        window.serviceAPI.API().get(window.serviceAPI.FIND_TEACHERS + `/${id}`)\n          .then((response) => {\n            vm.$root.$children[0].$refs.loader.show_loader = false;\n            response = response.data;\n            if (response.status) {\n              vm.teacher = response.data.teacher\n              vm.subjects = response.data.teacher.subjects\n              return\n            }\n          }).catch((error) => {\n          vm.$root.$children[0].$refs.loader.show_loader = false;\n          window.helper.handleError(error, vm);\n        });\n      } catch (e) {\n        console.log(e)\n      }\n    },\n    getAllSubjects() {\n      let vm = this;\n      vm.$root.$children[0].$refs.loader.show_loader = true;\n      try {\n        window.serviceAPI.API().get(window.serviceAPI.ALL_SUBJECTS)\n          .then((response) => {\n            vm.$root.$children[0].$refs.loader.show_loader = false;\n            response = response.data;\n            console.log(response)\n            if (response.status) {\n              vm.subjects = response.data.subjects.data;\n              return\n            }\n            vm.subjects = [];\n          }).catch((error) => {\n          vm.$root.$children[0].$refs.loader.show_loader = false;\n          window.helper.handleError(error, vm);\n          vm.subjects = [];\n        });\n      } catch (e) {\n        console.log(e)\n      }\n    },\n    getAllQuestions(filters = {}) {\n      let vm = this;\n      vm.$root.$children[0].$refs.loader.show_loader = true;\n      try {\n        window.serviceAPI.API().get(window.serviceAPI.ALL_QUESTION, {\n          params: filters\n        })\n          .then((response) => {\n            vm.$root.$children[0].$refs.loader.show_loader = false;\n            response = response.data;\n            console.log(response)\n            if (response.status) {\n              vm.questions = response.data.questions.data;\n              _.transform(response.data.questions.data, function (result, value, key) {\n                value.question_id = value.id;\n                result[key] = value;\n              }, {});\n              return\n            }\n            vm.questions = [];\n          }).catch((error) => {\n          vm.$root.$children[0].$refs.loader.show_loader = false;\n          window.helper.handleError(error, vm);\n          vm.questions = [];\n        });\n      } catch (e) {\n        console.log(e)\n      }\n    },\n    getQuestions() {\n      setTimeout(() => {\n        let stage_id = this.selectedStage ? this.selectedStage.id : '';\n        let auth_data = JSON.parse(window.ls.getFromStorage('auth_data'));\n\n        this.getAllQuestions({\n          stage_id: stage_id,\n          teacher_id: auth_data.user.id\n        })\n      }, 100)\n    },\n    addExam() {\n      const vm = this;\n      vm.openLoadingContained();\n      let request_data = vm.dataModel;\n      request_data.subject_id = vm.selectedSubjects ? vm.selectedSubjects.id : '';\n      request_data.stage_id = vm.selectedStage ? vm.selectedStage.id : '';\n      let auth_data = JSON.parse(window.ls.getFromStorage('auth_data'));\n      request_data.teacher_id = auth_data.user.id;\n      request_data.classroom_ids = vm.selectedClassRooms ?_.map(vm.selectedClassRooms, 'id')  : [];\n      request_data.questions = vm.selected;\n\n      $('.span-text-validation').text('');\n      try {\n        window.serviceAPI.API().post(window.serviceAPI.ADD_EXAM, request_data)\n          .then((response) => {\n            response = response.data;\n            if (response.status) {\n              window.helper.showMessage('success', vm);\n              vm.$router.push({name: 'teacher_exams'});\n              return null;\n            }\n            vm.closeLoadingContained()\n          }).catch((error) => {\n          vm.closeLoadingContained()\n          window.helper.handleError(error, vm);\n        });\n      } catch (e) {\n        console.log(e)\n      }\n    },\n    openLoadingContained() {\n      this.loading = true;\n      this.$vs.loading({\n        background: '#000',\n        color: '#fff',\n        container: \"#button-with-loading\",\n        scale: 0.45\n      })\n    },\n    closeLoadingContained() {\n      setTimeout(() => {\n        this.loading = false;\n        this.$vs.loading.close(\"#button-with-loading > .con-vs-loading\")\n      }, 100);\n    },\n  },\n}\n",{"version":3,"sources":["Index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"Index.vue","sourceRoot":"src/views/TeacherExams/Add","sourcesContent":["<template>\r\n  <div id=\"knowledge-base-page\">\r\n    <!-- KNOWLEDGE BASE CARDS  -->\r\n    <div class=\"vx-row\">\r\n      <div class=\"vx-col w-full md:w-1/1 mb-base\">\r\n        <vx-card class=\"text-right\">\r\n          <vs-alert class=\"mb-4\" color=\"dark\">\r\n            <span class=\"text-bold\">{{$ml.get('add_teacher_exams')}}</span>\r\n          </vs-alert>\r\n          <div class=\"vx-row\">\r\n            <div class=\"vx-col md:w-1/3 mb-base\">\r\n               <label class=\"vs-input--label\">{{$ml.get('subjects')}}\r\n                <span class=\"star\">*</span>\r\n              </label>\r\n              <multiselect v-model=\"selectedSubjects\" :options=\"subjects\" :multiple=\"false\" :close-on-select=\"true\"\r\n                           :clear-on-select=\"false\" :preserve-search=\"true\" :placeholder=\"$ml.get('search')\"\r\n                           :custom-label=\"customLabel\"\r\n                           track-by=\"id\" :preselect-first=\"true\">\r\n              </multiselect>\r\n              <span class=\"span-text-validation text-danger text-bold\" id=\"subject_id_error\"></span>\r\n            </div>\r\n            <div class=\"vx-col md:w-1/3 mb-base\">\r\n              <label class=\"vs-input--label\">{{$ml.get('stages')}}\r\n                <span class=\"star\">*</span>\r\n              </label>\r\n              <multiselect v-model=\"selectedStage\" :options=\"stages\" :multiple=\"false\" :close-on-select=\"true\"\r\n                           open-direction=\"bottom\" @select=\"getQuestions()\"\r\n                           :clear-on-select=\"false\" :preserve-search=\"true\" :placeholder=\"$ml.get('search')\"\r\n                           :custom-label=\"customStageLabel\"\r\n                           track-by=\"id\" :preselect-first=\"true\">\r\n              </multiselect>\r\n              <span class=\"span-text-validation text-danger text-bold\" id=\"stage_id_error\"></span>\r\n            </div>\r\n            <div class=\"vx-col md:w-1/3 mb-base\">\r\n              <label class=\"vs-input--label\">{{$ml.get('class_room')}}\r\n                <span class=\"star\">*</span>\r\n              </label>\r\n              <multiselect v-model=\"selectedClassRooms\" :options=\"classRooms\" :multiple=\"true\"\r\n                           open-direction=\"bottom\"\r\n                           :close-on-select=\"true\"\r\n                           :clear-on-select=\"false\" :preserve-search=\"true\" :placeholder=\"$ml.get('search')\"\r\n                           :custom-label=\"customStageLabel\"\r\n                           track-by=\"id\" :preselect-first=\"true\">\r\n              </multiselect>\r\n              <span class=\"span-text-validation text-danger text-bold\" id=\"classroom_id_error\"></span>\r\n              <span class=\"span-text-validation text-danger text-bold\" id=\"classroom_ids_error\"></span>\r\n            </div>\r\n            <div class=\"vx-col md:w-1/6 mb-base\">\r\n              <label class=\"vs-input--label\">{{$ml.get('name')}}\r\n                <span class=\"star\">*</span>\r\n              </label>\r\n              <vs-input class=\"w-full\" v-model=\"dataModel.name\"/>\r\n              <span class=\"span-text-validation text-danger text-bold\" id=\"name_error\"></span>\r\n            </div>\r\n            <div class=\"vx-col md:w-1/6 mb-base\">\r\n              <label class=\"vs-input--label\">{{$ml.get('exam_period')}}\r\n                <span class=\"star\">*</span>\r\n              </label>\r\n              <vs-input class=\"w-full\"   v-model=\"dataModel.duration\"/>\r\n              <span class=\"span-text-validation text-danger text-bold\" id=\"duration_error\"></span>\r\n            </div>\r\n            <div class=\"vx-col md:w-1/6 mb-base\">\r\n              <label class=\"vs-input--label\">{{$ml.get('start_date')}} <span class=\"star\">*</span></label>\r\n              <flat-pickr class=\"w-full\" :config=\"timeConfig\" :label=\"$ml.get('start_date')\"\r\n                          v-model=\"dataModel.start_date\"></flat-pickr>\r\n              <span class=\"span-text-validation text-danger text-bold\" id=\"start_date_error\"></span>\r\n            </div>\r\n            <div class=\"vx-col md:w-1/6 mb-base\">\r\n              <label class=\"vs-input--label\">{{$ml.get('end_date')}} <span class=\"star\">*</span></label>\r\n              <flat-pickr class=\"w-full\" :config=\"timeConfig\" :label=\"$ml.get('end_date')\"\r\n                          v-model=\"dataModel.end_date\"></flat-pickr>\r\n              <span class=\"span-text-validation text-danger text-bold\" id=\"end_date_error\"></span>\r\n            </div>\r\n            <div class=\"vx-col md:w-1/6 mb-base\">\r\n              <label class=\"vs-input--label\">{{$ml.get('status')}}\r\n                <span class=\"star\">*</span>\r\n              </label>\r\n              <vs-select class=\"w-full\" v-model=\"dataModel.status_id\">\r\n                <vs-select-item v-for=\"(state,key) in status\" :value=\"state.id\" :key=\"key\"\r\n                                :text=\"state.translated.title\"></vs-select-item>\r\n              </vs-select>\r\n              <span class=\"span-text-validation text-danger text-bold\" id=\"status_id_error\"></span>\r\n            </div>\r\n            <div class=\"vx-col md:w-1/6 mb-base\">\r\n              <vs-input class=\"w-full\" :label=\"$ml.get('question_number')\" v-model=\"dataModel.question_number\"/>\r\n              <span class=\"span-text-validation text-danger text-bold\" id=\"question_number_error\"></span>\r\n            </div>\r\n            <div class=\"vx-col md:w-1/6 mb-base\">\r\n              <label class=\"vs-input--label\">{{$ml.get('degree')}}\r\n                <span class=\"star\">*</span>\r\n              </label>\r\n              <vs-input class=\"w-full\" v-model=\"dataModel.degree\"/>\r\n              <span class=\"span-text-validation text-danger text-bold\" id=\"degree_error\"></span>\r\n            </div>\r\n            <div class=\"vx-col w-full mb-base\">\r\n              <vs-textarea class=\"w-full\" :label=\"$ml.get('notes')\" v-model=\"dataModel.notes\"/>\r\n              <span class=\"span-text-validation text-danger text-bold\" id=\"notes_error\"></span>\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <div class=\"vx-row\">\r\n            <div class=\"vx-col w-full text-center mb-base\">\r\n              <vs-table ref=\"table\" multiple v-model=\"selected\" :data=\"questions\">\r\n\r\n                <template slot=\"thead\">\r\n                  <vs-th>{{$ml.get('question')}}</vs-th>\r\n                  <vs-th>{{$ml.get('type')}}</vs-th>\r\n                  <vs-th>{{$ml.get('question_degree')}}</vs-th>\r\n                  <vs-th></vs-th>\r\n                </template>\r\n\r\n                <template slot-scope=\"{data}\">\r\n                  <vs-tr :data=\"tr\" :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n                    <vs-td class=\"text-right\">\r\n                      {{tr.name}}\r\n                    </vs-td>\r\n                    <vs-td class=\"text-right\">\r\n                      {{$ml.get(tr.type)}}\r\n                    </vs-td>\r\n                    <vs-td class=\"text-right\">\r\n                      <vs-input v-model=\"questions[indextr].degree\"/>\r\n                    </vs-td>\r\n                  </vs-tr>\r\n                </template>\r\n              </vs-table>\r\n            </div>\r\n          </div>\r\n          <div class=\"vx-row\">\r\n            <div class=\"vx-col w-full text-center mb-base\">\r\n              <vs-button ref=\"loadableButton\" id=\"button-with-loading\" :disabled=\"loading\"\r\n                         class=\"vs-con-loading__container vs-button-dark text-bold\"\r\n                         @click=\"addExam\" type=\"filled\" vslor=\"primary\">\r\n                {{$ml.get('add')}}\r\n              </vs-button>\r\n            </div>\r\n          </div>\r\n        </vx-card>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import Multiselect from 'vue-multiselect'\r\n  import 'vue-multiselect/dist/vue-multiselect.min.css'\r\n  import flatPickr from 'vue-flatpickr-component';\r\n  import 'flatpickr/dist/flatpickr.css';\r\n\r\n  export default {\r\n    components: {\r\n      Multiselect, flatPickr\r\n    },\r\n    data() {\r\n      return {\r\n        dataModel: {},\r\n        timeConfig: {\r\n          enableTime: true,\r\n          time_24hr: true\r\n        },\r\n        teacher: {},\r\n        q_types: ['mcq', 'true_false', 'text'],\r\n        subjects: [],\r\n        selectedSubjects: null,\r\n        status: [],\r\n        selected: [],\r\n        stages: [],\r\n        selectedStage: null,\r\n        classRooms: [],\r\n        selectedClassRooms: null,\r\n        questions: [],\r\n        loading: false\r\n      }\r\n    }, watch: {\r\n      selectedStage: function (newStage, oldStage) {\r\n        // if (oldStage != null) {\r\n        this.selectedClassRooms = null;\r\n        this.classRooms = newStage.class_rooms;\r\n        // }\r\n      }\r\n    },\r\n    computed: {},\r\n    mounted() {\r\n      let auth_data = JSON.parse(window.ls.getFromStorage('auth_data'));\r\n      this.findId = auth_data.user.id;\r\n      this.findTeacher()\r\n      this.getAllStages()\r\n      this.getAllStatus()\r\n    },\r\n    methods: {\r\n      customLabel({translated}) {\r\n        return `${translated.title}`\r\n      },\r\n      customStageLabel({translated}) {\r\n        return `${translated.title}`\r\n      },\r\n      getAllStatus() {\r\n        let vm = this;\r\n        vm.$root.$children[0].$refs.loader.show_loader = true;\r\n        try {\r\n          window.serviceAPI.API().get(window.serviceAPI.ALL_STATUS)\r\n            .then((response) => {\r\n              vm.$root.$children[0].$refs.loader.show_loader = false;\r\n              response = response.data;\r\n              console.log(response)\r\n              if (response.status) {\r\n                vm.status = response.data.status.exam_status;\r\n                return\r\n              }\r\n              vm.status = [];\r\n            }).catch((error) => {\r\n            vm.$root.$children[0].$refs.loader.show_loader = false;\r\n            window.helper.handleError(error, vm);\r\n            vm.status = [];\r\n          });\r\n        } catch (e) {\r\n          console.log(e)\r\n        }\r\n      },\r\n      getAllStages() {\r\n        let vm = this;\r\n        vm.$root.$children[0].$refs.loader.show_loader = true;\r\n        try {\r\n          window.serviceAPI.API().get(window.serviceAPI.ALL_STAGES)\r\n            .then((response) => {\r\n              vm.$root.$children[0].$refs.loader.show_loader = false;\r\n              response = response.data;\r\n              if (response.status) {\r\n                vm.stages = response.data.stages.data;\r\n                // vm.classRooms = vm.stages.length > 0 ? vm.stages[0].class_rooms : [];\r\n                return\r\n              }\r\n              vm.stages = [];\r\n            }).catch((error) => {\r\n            vm.$root.$children[0].$refs.loader.show_loader = false;\r\n            window.helper.handleError(error, vm);\r\n            vm.stages = [];\r\n          });\r\n        } catch (e) {\r\n          console.log(e)\r\n        }\r\n      },\r\n      changeQuestionType() {\r\n        let vm = this;\r\n        console.log(vm.dataModel.question_type)\r\n      },\r\n      findTeacher() {\r\n\r\n        let vm = this;\r\n        let id = vm.findId;\r\n        vm.$root.$children[0].$refs.loader.show_loader = true;\r\n        try {\r\n          window.serviceAPI.API().get(window.serviceAPI.FIND_TEACHERS + `/${id}`)\r\n            .then((response) => {\r\n              vm.$root.$children[0].$refs.loader.show_loader = false;\r\n              response = response.data;\r\n              if (response.status) {\r\n                vm.teacher = response.data.teacher\r\n                vm.subjects = response.data.teacher.subjects\r\n                return\r\n              }\r\n            }).catch((error) => {\r\n            vm.$root.$children[0].$refs.loader.show_loader = false;\r\n            window.helper.handleError(error, vm);\r\n          });\r\n        } catch (e) {\r\n          console.log(e)\r\n        }\r\n      },\r\n      getAllSubjects() {\r\n        let vm = this;\r\n        vm.$root.$children[0].$refs.loader.show_loader = true;\r\n        try {\r\n          window.serviceAPI.API().get(window.serviceAPI.ALL_SUBJECTS)\r\n            .then((response) => {\r\n              vm.$root.$children[0].$refs.loader.show_loader = false;\r\n              response = response.data;\r\n              console.log(response)\r\n              if (response.status) {\r\n                vm.subjects = response.data.subjects.data;\r\n                return\r\n              }\r\n              vm.subjects = [];\r\n            }).catch((error) => {\r\n            vm.$root.$children[0].$refs.loader.show_loader = false;\r\n            window.helper.handleError(error, vm);\r\n            vm.subjects = [];\r\n          });\r\n        } catch (e) {\r\n          console.log(e)\r\n        }\r\n      },\r\n      getAllQuestions(filters = {}) {\r\n        let vm = this;\r\n        vm.$root.$children[0].$refs.loader.show_loader = true;\r\n        try {\r\n          window.serviceAPI.API().get(window.serviceAPI.ALL_QUESTION, {\r\n            params: filters\r\n          })\r\n            .then((response) => {\r\n              vm.$root.$children[0].$refs.loader.show_loader = false;\r\n              response = response.data;\r\n              console.log(response)\r\n              if (response.status) {\r\n                vm.questions = response.data.questions.data;\r\n                _.transform(response.data.questions.data, function (result, value, key) {\r\n                  value.question_id = value.id;\r\n                  result[key] = value;\r\n                }, {});\r\n                return\r\n              }\r\n              vm.questions = [];\r\n            }).catch((error) => {\r\n            vm.$root.$children[0].$refs.loader.show_loader = false;\r\n            window.helper.handleError(error, vm);\r\n            vm.questions = [];\r\n          });\r\n        } catch (e) {\r\n          console.log(e)\r\n        }\r\n      },\r\n      getQuestions() {\r\n        setTimeout(() => {\r\n          let stage_id = this.selectedStage ? this.selectedStage.id : '';\r\n          let auth_data = JSON.parse(window.ls.getFromStorage('auth_data'));\r\n\r\n          this.getAllQuestions({\r\n            stage_id: stage_id,\r\n            teacher_id: auth_data.user.id\r\n          })\r\n        }, 100)\r\n      },\r\n      addExam() {\r\n        const vm = this;\r\n        vm.openLoadingContained();\r\n        let request_data = vm.dataModel;\r\n        request_data.subject_id = vm.selectedSubjects ? vm.selectedSubjects.id : '';\r\n        request_data.stage_id = vm.selectedStage ? vm.selectedStage.id : '';\r\n        let auth_data = JSON.parse(window.ls.getFromStorage('auth_data'));\r\n        request_data.teacher_id = auth_data.user.id;\r\n        request_data.classroom_ids = vm.selectedClassRooms ?_.map(vm.selectedClassRooms, 'id')  : [];\r\n        request_data.questions = vm.selected;\r\n\r\n        $('.span-text-validation').text('');\r\n        try {\r\n          window.serviceAPI.API().post(window.serviceAPI.ADD_EXAM, request_data)\r\n            .then((response) => {\r\n              response = response.data;\r\n              if (response.status) {\r\n                window.helper.showMessage('success', vm);\r\n                vm.$router.push({name: 'teacher_exams'});\r\n                return null;\r\n              }\r\n              vm.closeLoadingContained()\r\n            }).catch((error) => {\r\n            vm.closeLoadingContained()\r\n            window.helper.handleError(error, vm);\r\n          });\r\n        } catch (e) {\r\n          console.log(e)\r\n        }\r\n      },\r\n      openLoadingContained() {\r\n        this.loading = true;\r\n        this.$vs.loading({\r\n          background: '#000',\r\n          color: '#fff',\r\n          container: \"#button-with-loading\",\r\n          scale: 0.45\r\n        })\r\n      },\r\n      closeLoadingContained() {\r\n        setTimeout(() => {\r\n          this.loading = false;\r\n          this.$vs.loading.close(\"#button-with-loading > .con-vs-loading\")\r\n        }, 100);\r\n      },\r\n    },\r\n  }\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n</style>\r\n"]}]}